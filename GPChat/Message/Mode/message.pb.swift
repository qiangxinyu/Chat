// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 消息
struct Message: SwiftProtobuf.Message {
  static let protoMessageName: String = "Message"

  var type: Message.MessageType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var messageData: MessageData {
    get {return _storage._messageData ?? MessageData()}
    set {_uniqueStorage()._messageData = newValue}
  }
  /// Returns true if `messageData` has been explicitly set.
  var hasMessageData: Bool {return _storage._messageData != nil}
  /// Clears the value of `messageData`. Subsequent reads from it will return its default value.
  mutating func clearMessageData() {_storage._messageData = nil}

  var readData: ReadData {
    get {return _storage._readData ?? ReadData()}
    set {_uniqueStorage()._readData = newValue}
  }
  /// Returns true if `readData` has been explicitly set.
  var hasReadData: Bool {return _storage._readData != nil}
  /// Clears the value of `readData`. Subsequent reads from it will return its default value.
  mutating func clearReadData() {_storage._readData = nil}

  var receiveData: ReceiveData {
    get {return _storage._receiveData ?? ReceiveData()}
    set {_uniqueStorage()._receiveData = newValue}
  }
  /// Returns true if `receiveData` has been explicitly set.
  var hasReceiveData: Bool {return _storage._receiveData != nil}
  /// Clears the value of `receiveData`. Subsequent reads from it will return its default value.
  mutating func clearReceiveData() {_storage._receiveData = nil}

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MessageType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case message // = 1
    case read // = 2
    case receive // = 3
    case heart // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .message
      case 2: self = .read
      case 3: self = .receive
      case 4: self = .heart
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .message: return 1
      case .read: return 2
      case .receive: return 3
      case .heart: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._messageData)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._readData)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._receiveData)
        case 5: try decoder.decodeSingularStringField(value: &_storage._appID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .none {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._messageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._readData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._receiveData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///已读
struct ReadData: SwiftProtobuf.Message {
  static let protoMessageName: String = "ReadData"

  var messageID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.messageID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///服务器接收到信息后返回
struct ReceiveData: SwiftProtobuf.Message {
  static let protoMessageName: String = "ReceiveData"

  var messageID: String = String()

  var sendTime: UInt64 = 0

  var receiveTime: UInt64 = 0

  var targetID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.messageID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.sendTime)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.receiveTime)
      case 4: try decoder.decodeSingularStringField(value: &self.targetID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    if self.sendTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.sendTime, fieldNumber: 2)
    }
    if self.receiveTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.receiveTime, fieldNumber: 3)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///聊天消息消息
struct MessageData: SwiftProtobuf.Message {
  static let protoMessageName: String = "MessageData"

  var data: String {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var type: MessageData.MessageDataType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var targetID: String {
    get {return _storage._targetID}
    set {_uniqueStorage()._targetID = newValue}
  }

  var time: UInt64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var status: MessageData.MessageStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var userInfo: UserInfo {
    get {return _storage._userInfo ?? UserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {_storage._userInfo = nil}

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var imgHeight: UInt32 {
    get {return _storage._imgHeight}
    set {_uniqueStorage()._imgHeight = newValue}
  }

  var imgWidth: UInt32 {
    get {return _storage._imgWidth}
    set {_uniqueStorage()._imgWidth = newValue}
  }

  ///单位 秒
  var voiceTime: UInt32 {
    get {return _storage._voiceTime}
    set {_uniqueStorage()._voiceTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MessageDataType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case text // = 1
    case image // = 2
    case voice // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .text
      case 2: self = .image
      case 3: self = .voice
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .text: return 1
      case .image: return 2
      case .voice: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum MessageStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case noneStatus // = 0
    case unread // = 3
    case read // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .noneStatus
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noneStatus
      case 3: self = .unread
      case 4: self = .read
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .noneStatus: return 0
      case .unread: return 3
      case .read: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._data)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._targetID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._time)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
        case 7: try decoder.decodeSingularStringField(value: &_storage._id)
        case 8: try decoder.decodeSingularUInt32Field(value: &_storage._imgHeight)
        case 9: try decoder.decodeSingularUInt32Field(value: &_storage._imgWidth)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._voiceTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._data.isEmpty {
        try visitor.visitSingularStringField(value: _storage._data, fieldNumber: 1)
      }
      if _storage._type != .none {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._targetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetID, fieldNumber: 3)
      }
      if _storage._time != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._time, fieldNumber: 4)
      }
      if _storage._status != .noneStatus {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 5)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 7)
      }
      if _storage._imgHeight != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._imgHeight, fieldNumber: 8)
      }
      if _storage._imgWidth != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._imgWidth, fieldNumber: 9)
      }
      if _storage._voiceTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._voiceTime, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///用户信息
struct UserInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = "UserInfo"

  var id: String = String()

  var name: String = String()

  var avatar: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.avatar)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "message_data"),
    3: .standard(proto: "read_data"),
    4: .standard(proto: "receive_data"),
    5: .standard(proto: "app_id"),
  ]

  fileprivate class _StorageClass {
    var _type: Message.MessageType = .none
    var _messageData: MessageData? = nil
    var _readData: ReadData? = nil
    var _receiveData: ReceiveData? = nil
    var _appID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _messageData = source._messageData
      _readData = source._readData
      _receiveData = source._receiveData
      _appID = source._appID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Message) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        if _storage._messageData != other_storage._messageData {return false}
        if _storage._readData != other_storage._readData {return false}
        if _storage._receiveData != other_storage._receiveData {return false}
        if _storage._appID != other_storage._appID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Message.MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Message"),
    2: .same(proto: "Read"),
    3: .same(proto: "Receive"),
    4: .same(proto: "Heart"),
  ]
}

extension ReadData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
  ]

  func _protobuf_generated_isEqualTo(other: ReadData) -> Bool {
    if self.messageID != other.messageID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ReceiveData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
    2: .standard(proto: "send_time"),
    3: .standard(proto: "receive_time"),
    4: .standard(proto: "target_id"),
  ]

  func _protobuf_generated_isEqualTo(other: ReceiveData) -> Bool {
    if self.messageID != other.messageID {return false}
    if self.sendTime != other.sendTime {return false}
    if self.receiveTime != other.receiveTime {return false}
    if self.targetID != other.targetID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MessageData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "type"),
    3: .standard(proto: "target_id"),
    4: .same(proto: "time"),
    5: .same(proto: "status"),
    6: .standard(proto: "user_info"),
    7: .same(proto: "id"),
    8: .standard(proto: "img_height"),
    9: .standard(proto: "img_width"),
    10: .standard(proto: "voice_time"),
  ]

  fileprivate class _StorageClass {
    var _data: String = String()
    var _type: MessageData.MessageDataType = .none
    var _targetID: String = String()
    var _time: UInt64 = 0
    var _status: MessageData.MessageStatus = .noneStatus
    var _userInfo: UserInfo? = nil
    var _id: String = String()
    var _imgHeight: UInt32 = 0
    var _imgWidth: UInt32 = 0
    var _voiceTime: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _type = source._type
      _targetID = source._targetID
      _time = source._time
      _status = source._status
      _userInfo = source._userInfo
      _id = source._id
      _imgHeight = source._imgHeight
      _imgWidth = source._imgWidth
      _voiceTime = source._voiceTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: MessageData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._data != other_storage._data {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._targetID != other_storage._targetID {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._userInfo != other_storage._userInfo {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._imgHeight != other_storage._imgHeight {return false}
        if _storage._imgWidth != other_storage._imgWidth {return false}
        if _storage._voiceTime != other_storage._voiceTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MessageData.MessageDataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Text"),
    2: .same(proto: "Image"),
    3: .same(proto: "Voice"),
  ]
}

extension MessageData.MessageStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NoneStatus"),
    3: .same(proto: "Unread"),
    4: .same(proto: "Read"),
  ]
}

extension UserInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "avatar"),
  ]

  func _protobuf_generated_isEqualTo(other: UserInfo) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.avatar != other.avatar {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
